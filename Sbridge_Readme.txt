Linux Serial bridge:
--------------------
Deliverables:
1. wilcsbridge_sdio.c --> wilc sdio inerface driver for sbridge application
2. wilcsbridge_spi.c  --> wilc spi inerface driver for sbridge application
3. wilc_sbridge.h
4. wilc3000_ble_burst_firmware.h --> used for WILC3000 BLE interface testing
5. sbridge_app.c --> Serial Bridge application for MCHPRT tool, MAC address write, and Frequency offset configuration
6. sbridge_app_record.c -> sbridge application with "RECORDER_MODE" macro enabled
6. sbridge_app_replay.c -> sbridge application with "PLAYER_MODE" macro enabled
6. sbridge_Readme.txt
7. MCHPRT2 GUI Tool
8. wilc_dump.h sample file
9. Tested sbridge_app_replay binaries in different scenarios
10. MCHPRT2 User Guide

UART Configuration for Serial Bridge Application:
-------------------------------------------------
In SAMA5D4 Xplained Pro board, UART0 is used for serial bridge communication. by default UART0 is disabled, enable the UART0 in device tree .dtsi file.
In the serial bridge application, for UART0 "/dev/ttyS5" device will be created. Same will be used for transmit and receive the data from GUI tool.

Note: For other MPU's use the any UART available and respective "/dev/ttyxx" device.


Kernel Compilation with serial Bridge driver:
---------------------------------------------

Attached the reference and validated kernel with serial bridge driver and application for WILC1000 and WILC3000.
Use the WILC Linux user Gude (http://ww1.microchip.com/downloads/en/DeviceDoc/ATWILC1000-ATWILC3000-Wi-Fi-Link-Controller-Linux-User-Guide-DS70005328B.pdf)
to compile the kernel with WILC wlan driver. The out will generate the Linux kernel image and WILC modules.

Serial bridge application should be cross compiled against the target device. Following command can be used.
...../arm-linux-gnueabihf-gcc -o sbridge_app sbridge_app.c 

Note: Export the ARM GCC compiler path or provide the absolete path.




Output modules:
---------------
wilcsbridge-spi.ko  -> For SPI Interface
wilcsbridge-sdio.ko -> For SDIO Interface
sbridge_app -> Serial bridge application without replay and record mode macro enabled.
sbridge_app_record -> Sbridge application with RECORDER_MODE macro enabled
sbridge_app_replay -> Sbridge application with PLAYER_MODE macro enabled


Commands to Run Serial Bridge application to Connect with MCHPRT2 Tool:
-----------------------------------------------------------------------
1. insmod wilcsbridge-spi.ko
2. ./sbridge_app spi 230400 ttyS5
3. Connect the FTDI cable with SAMA5D4 EXT2 pin 11 (Tx) and pin 12 (Rx)
4. Run the MCHPRT2 Tool and follow thr user guide to run the tool as mentioned


Commands to Run Serial Bridge application to Connect with MCHPRT2 Tool:
-----------------------------------------------------------------------
1. insmod wilcsbridge-spi.ko
2. ./sbridge_app_record --> interface -spi, buadrate - 230400, usrt console - ttyS5 with RECORDER_MODE macro enabled.
3. Connect the FTDI cable with SAMA5D4 EXT2 pin 11 (Tx) and pin 12 (Rx)
4. Run the MCHPRT2 Tool and follow thr user guide to run the tool as mentioned
5. sbridge_lo.txt log file will be generated by sbridge_app_record application for MCHPRT2 use case scenario.
6. copy the sbridge_log.txt file in to host machine.
7. Create wilc_dump.h header file with hex array from sbridge_log.txt file copied from target board.
8. ...../arm-linux-gnueabihf-gcc -o sbridge_app_replay sbridge_app_replay.c --> to generate the sbridge_app_replay application with wilc_dump.h hex array.
9. ./sbridge_app_replay --> interface -spi, buadrate - 230400, usrt console - ttyS5 with PLAYER_MODE macro enabled.
10. player application run without any input trigger and execute the Tx or Rx scenario as excuted in record mode.
11. Repeat from step 2 for further certification testing.

Commands to Run MAC write using sbridge application:
----------------------------------------------------
1) Load the provided driver module in the package(wilcsbridge-spi.ko) using "insmod"
   Command:  insmod wilcsbridge-spi.ko


2) To run the application file, it require 4 parameters. 
	1) protocol(valid argument:spi)
	2) serial console baud rate(valid argument:115200)
	3) ttyS5
           -- This parameter doesn't have impact on this application. But used for compatibility with serial bridge application, which can be merged with this applicaton in future.
	4) "mac" string will be used to enter the MAC address write mode followed by hex value MAC address	   
    5) MAC address(valid argument:6 bytes of hexadecimal number)

     Command: ./sbridge_app  spi 230400 ttyS5 mac f8f005f431f2
	 
	 
Commands to Run Frequency Offset write using sbridge application:
------------------------------------------------------------------
1) Load the provided driver module in the package(wilcsbridge-spi.ko) using "insmod"
   Command:  insmod wilcsbridge-spi.ko


2) To run the application file, it require 4 parameters. 
	1) protocol(valid argument:spi)
	2) serial console baud rate(valid argument:115200)
	3) ttyS5
           -- This parameter doesn't have impact on this application. But used for compatibility with serial bridge application, which can be merged with this applicaton in future.
	4) "xooff" string will be used to enter the frequency or XO offset mode followed by offset value in ppm   
    5) Frequency offset value (valid argument: in ppm vlaue in floating point number Ex: 4.03 or 3.25 etc)

     Command: ./sbridge_app  spi 230400 ttyS5 xooff 4.03
	 
	 
Commands to Run MAC write and frequency offset value combinedly using sbridge application:
------------------------------------------------------------------------------------------
1) Load the provided driver module in the package(wilcsbridge-spi.ko) using "insmod"
   Command:  insmod wilcsbridge-spi.ko


2) To run the application file, it require 4 parameters. 
	1) protocol(valid argument:spi)
	2) serial console baud rate(valid argument:115200)
	3) ttyS5
           -- This parameter doesn't have impact on this application. But used for compatibility with serial bridge application, which can be merged with this applicaton in future.
	4) "mac" string will be used to enter the MAC address write mode followed by hex value MAC address	   
    5) MAC address(valid argument:6 bytes of hexadecimal number)
	6) "xooff" string will be used to enter the frequency or XO offset mode followed by offset value in ppm   
    7) Frequency offset value (valid argument: in ppm vlaue in floating point number Ex: 4.03 or 3.25 etc)

     Command: ./sbridge_app  spi 230400 ttyS5 mac f8f005f431f2 xooff 4.03

Pin configuration for SAMA5D4 with WILC1000 SPI interface:
-----------------------------------------------------------
The Linux serial bridge driver is reference to the SAMA5D4 Xplained pro board.
EXT1 header pin configuration is used for SPI interface, Rest, Chip_En, IRQ.


-------------------
Des			EXT1
------------------			
SPI MISO -> 17 pin
SPI MOSI -> 16 pin
SPI SCK  -> 18 pin
SPI SS   -> 15 pin
RESET    ->  5 pin
CHIP_EN  -> 10 pin
IRQ      ->  9 pin (optional for Serial bridge application)

Note:
----
	SPI interface pins are configured using device tree of the Linux kernel. RESET and CHIP_EN pins are configured in the "wilc_spi.c" driver itself using GPIO numbers.
	
Test Procedure:
---------------	
1. Flash Linux Kernel image in to SAMA5D4 MPU -> refer (Linux User Guide) 
2. Connect the WILC1000 to EXT1 or corresponding SPI interface 
3. Connect the FTDI cable Rx - Yellow (ET2 header - pin 12) and Tx - Ornage (ET2 header - pin 11) and Windows PC for GUI tool communication
4. Follow the MCHPRT user guide for production and validation.
